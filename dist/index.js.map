{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/prngs.js", "../lib/factory.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"name\": \"mt19937\",\n\t\"copy\": true\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar minstd = require( '@stdlib/random-base-minstd' );\nvar minstdShuffle = require( '@stdlib/random-base-minstd-shuffle' );\nvar mt19937 = require( '@stdlib/random-base-mt19937' );\n\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'minstd' ] = minstd;\nprngs[ 'minstd-shuffle' ] = minstdShuffle;\nprngs[ 'mt19937' ] = mt19937;\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar PRNGS = require( './prngs.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers having integer values.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of pseudorandom number generator\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randi = factory();\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'name': 'minstd'\n* });\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'seed': 12345\n* });\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n* var v = randi();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option cannot be undefined. Option: `%s`.', 'seed', opts.seed ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( format( 'invalid option. Unrecognized/unsupported PRNG. Option: `%s`.', opts.name ) );\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( opts.seed === void 0 ) {\n\t\t\trand = prng.factory();\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'seed': opts.seed\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'state': opts.state,\n\t\t\t'copy': opts.copy\n\t\t});\n\t}\n\tsetReadOnly( randi, 'NAME', 'randi' );\n\tsetReadOnlyAccessor( randi, 'seed', getSeed );\n\tsetReadOnlyAccessor( randi, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( randi, 'state', getState, setState );\n\tsetReadOnlyAccessor( randi, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( randi, 'byteLength', getStateSize );\n\tsetReadOnly( randi, 'toJSON', toJSON );\n\tsetReadOnly( randi, 'PRNG', rand );\n\tsetReadOnly( randi, 'MIN', rand.MIN );\n\tsetReadOnly( randi, 'MAX', rand.MAX );\n\n\treturn randi;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = randi.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number having an integer value.\n\t*\n\t* @private\n\t* @returns {integer} pseudorandom number\n\t*\n\t* @example\n\t* var v = randi();\n\t* // returns <number>\n\t*/\n\tfunction randi() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number having an integer value.\n*\n* @name randi\n* @type {PRNG}\n* @returns {integer} pseudorandom number\n*\n* @example\n* var v = randi();\n* // returns <number>\n*/\nvar randi = factory();\n\n\n// EXPORTS //\n\nmodule.exports = randi;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pseudorandom numbers having integer values.\n*\n* @module @stdlib/random-base-randi\n*\n* @example\n* var randi = require( '@stdlib/random-base-randi' );\n*\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-randi' ).factory;\n*\n* var randi = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n*\n* var v = randi();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_prngs", "__commonJSMin", "exports", "module", "minstd", "minstdShuffle", "mt19937", "prngs", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isObject", "isBoolean", "hasOwnProp", "typedarray2json", "format", "defaults", "PRNGS", "factory", "options", "opts", "rand", "prng", "randi", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "randi", "setReadOnly", "main", "factory"]
}
