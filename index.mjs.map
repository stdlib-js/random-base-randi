{"version":3,"file":"index.mjs","sources":["../lib/prngs.js","../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport minstd from '@stdlib/random-base-minstd';\nimport minstdShuffle from '@stdlib/random-base-minstd-shuffle';\nimport mt19937 from '@stdlib/random-base-mt19937';\n\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'minstd' ] = minstd;\nprngs[ 'minstd-shuffle' ] = minstdShuffle;\nprngs[ 'mt19937' ] = mt19937;\n\n\n// EXPORTS //\n\nexport default prngs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport typedarray2json from '@stdlib/array-to-json';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport defaults from './defaults.json';\nimport PRNGS from './prngs.js';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers having integer values.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of pseudorandom number generator\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randi = factory();\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'name': 'minstd'\n* });\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'seed': 12345\n* });\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n* var v = randi();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0ox47', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( format( '0ox7Y', 'state', opts.state ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( '0ox7Y', 'seed', opts.seed ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0ox2o', 'copy', opts.copy ) );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( format( '0ox7Z', opts.name ) );\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( opts.seed === void 0 ) {\n\t\t\trand = prng.factory();\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'seed': opts.seed\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'state': opts.state,\n\t\t\t'copy': opts.copy\n\t\t});\n\t}\n\tsetReadOnly( randi, 'NAME', 'randi' );\n\tsetReadOnlyAccessor( randi, 'seed', getSeed );\n\tsetReadOnlyAccessor( randi, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( randi, 'state', getState, setState );\n\tsetReadOnlyAccessor( randi, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( randi, 'byteLength', getStateSize );\n\tsetReadOnly( randi, 'toJSON', toJSON );\n\tsetReadOnly( randi, 'PRNG', rand );\n\tsetReadOnly( randi, 'MIN', rand.MIN );\n\tsetReadOnly( randi, 'MAX', rand.MAX );\n\n\treturn randi;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = randi.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number having an integer value.\n\t*\n\t* @private\n\t* @returns {integer} pseudorandom number\n\t*\n\t* @example\n\t* var v = randi();\n\t* // returns <number>\n\t*/\n\tfunction randi() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number having an integer value.\n*\n* @name randi\n* @type {PRNG}\n* @returns {integer} pseudorandom number\n*\n* @example\n* var v = randi();\n* // returns <number>\n*/\nvar randi = factory();\n\n\n// EXPORTS //\n\nexport default randi;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pseudorandom numbers having integer values.\n*\n* @module @stdlib/random-base-randi\n*\n* @example\n* import randi from '@stdlib/random-base-randi';\n*\n* var v = randi();\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-randi';\n*\n* var randi = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n*\n* var v = randi();\n* // returns <number>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["prngs","factory","options","opts","rand","prng","name","defaults","copy","arguments","length","isObject","TypeError","format","hasOwnProp","state","seed","isBoolean","PRNGS","Error","setReadOnly","randi","setReadOnlyAccessor","seedLength","setReadWriteAccessor","s","stateLength","byteLength","out","NAME","typedarray2json","params","MIN","MAX","minstd","minstdShuffle","mt19937","main"],"mappings":";;qoCA6BIA,EAAQ,CAAA,EC+CZ,SAASC,EAASC,GACjB,IAAIC,EACAC,EACAC,EAMJ,GAJAF,EAAO,CACNG,KAAQC,EACRC,KAAQD,GAEJE,UAAUC,OAAS,CACvB,IAAMC,EAAUT,GACf,MAAM,IAAIU,UAAWC,EAAQ,QAASX,IAKvC,GAHKY,EAAYZ,EAAS,UACzBC,EAAKG,KAAOJ,EAAQI,MAEhBQ,EAAYZ,EAAS,UAEzB,GADAC,EAAKY,MAAQb,EAAQa,WACD,IAAfZ,EAAKY,MACT,MAAM,IAAIH,UAAWC,EAAQ,QAAS,QAASV,EAAKY,aAE/C,GAAKD,EAAYZ,EAAS,UAChCC,EAAKa,KAAOd,EAAQc,UACD,IAAdb,EAAKa,MACT,MAAM,IAAIJ,UAAWC,EAAQ,QAAS,OAAQV,EAAKa,OAGrD,GAAKF,EAAYZ,EAAS,UACzBC,EAAKK,KAAON,EAAQM,MACdS,EAAWd,EAAKK,OACrB,MAAM,IAAII,UAAWC,EAAQ,QAAS,OAAQV,EAAKK,MAGrD,CAED,QAAc,KADdH,EAAOa,EAAOf,EAAKG,OAElB,MAAM,IAAIa,MAAON,EAAQ,QAASV,EAAKG,OA2BxC,OAvBEF,OAFkB,IAAfD,EAAKY,WACU,IAAdZ,EAAKa,KACFX,EAAKJ,UAELI,EAAKJ,QAAQ,CACnBe,KAAQb,EAAKa,OAIRX,EAAKJ,QAAQ,CACnBc,MAASZ,EAAKY,MACdP,KAAQL,EAAKK,OAGfY,EAAaC,EAAO,OAAQ,SAC5BC,EAAqBD,EAAO,QAkB5B,WACC,OAAOjB,EAAKY,IACZ,IAnBDM,EAAqBD,EAAO,cA2B5B,WACC,OAAOjB,EAAKmB,UACZ,IA5BDC,EAAsBH,EAAO,SAwD7B,WACC,OAAOjB,EAAKW,KACZ,IASD,SAAmBU,GAClBrB,EAAKW,MAAQU,CACb,IApEDH,EAAqBD,EAAO,eAmC5B,WACC,OAAOjB,EAAKsB,WACZ,IApCDJ,EAAqBD,EAAO,cA4C5B,WACC,OAAOjB,EAAKuB,UACZ,IA7CDP,EAAaC,EAAO,UA8EpB,WACC,IAAIO,EAAM,CACVA,KAAW,QAIX,OAHAA,EAAItB,KAAOe,EAAMQ,KAAO,IAAMzB,EAAKyB,KACnCD,EAAIb,MAAQe,EAAiB1B,EAAKW,OAClCa,EAAIG,OAAS,GACNH,CACP,IApFDR,EAAaC,EAAO,OAAQjB,GAC5BgB,EAAaC,EAAO,MAAOjB,EAAK4B,KAChCZ,EAAaC,EAAO,MAAOjB,EAAK6B,KAEzBZ,EA4FP,SAASA,IACR,OAAOjB,GACP,CACF,CD3MAJ,EAAiB,OAAGkC,EACpBlC,EAAO,kBAAqBmC,EAC5BnC,EAAkB,QAAGoC,EEKlB,IAACf,EAAQpB,ICcZmB,EAAAiB,EAAA,UAAApC"}