{"version":3,"file":"index.mjs","sources":["../lib/prngs.js","../lib/factory.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'minstd' ] = require( '@stdlib/random-base-minstd' );\nprngs[ 'minstd-shuffle' ] = require( '@stdlib/random-base-minstd-shuffle' );\nprngs[ 'mt19937' ] = require( '@stdlib/random-base-mt19937' );\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar defaults = require( './defaults.json' );\nvar PRNGS = require( './prngs.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating random numbers having integer values.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='mt19937'] - name of pseudorandom number generator\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randi = factory();\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'name': 'minstd'\n* });\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'seed': 12345\n* });\n* var v = randi();\n* // returns <number>\n*\n* @example\n* var randi = factory({\n*     'name': 'minstd',\n*     'seed': 12345\n* });\n* var v = randi();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option cannot be undefined. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `seed` option cannot be undefined. Option: `' + opts.seed + '`.' );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( 'invalid option. Unrecognized/unsupported PRNG. Option: `' + opts.name + '`.' );\n\t}\n\tif ( opts.state === void 0 ) {\n\t\tif ( opts.seed === void 0 ) {\n\t\t\trand = prng.factory();\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'seed': opts.seed\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'state': opts.state,\n\t\t\t'copy': opts.copy\n\t\t});\n\t}\n\tsetReadOnly( randi, 'NAME', 'randi' );\n\tsetReadOnlyAccessor( randi, 'seed', getSeed );\n\tsetReadOnlyAccessor( randi, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( randi, 'state', getState, setState );\n\tsetReadOnlyAccessor( randi, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( randi, 'byteLength', getStateSize );\n\tsetReadOnly( randi, 'toJSON', toJSON );\n\tsetReadOnly( randi, 'PRNG', rand );\n\tsetReadOnly( randi, 'MIN', rand.MIN );\n\tsetReadOnly( randi, 'MAX', rand.MAX );\n\n\treturn randi;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = randi.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number having an integer value.\n\t*\n\t* @private\n\t* @returns {integer} pseudorandom number\n\t*\n\t* @example\n\t* var v = randi();\n\t* // returns <number>\n\t*/\n\tfunction randi() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number having an integer value.\n*\n* @name randi\n* @type {PRNG}\n* @returns {integer} pseudorandom number\n*\n* @example\n* var v = randi();\n* // returns <number>\n*/\nvar randi = factory();\n\n\n// EXPORTS //\n\nmodule.exports = randi;\n"],"names":["prngs","require$$0","require$$1","require$$2","prngs_1","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","require$$3","isBoolean","require$$4","isPrimitive","hasOwnProp","require$$5","typedarray2json","require$$6","defaults","require$$7","PRNGS","require$$8","factory_1","options","opts","rand","prng","name","copy","arguments","length","TypeError","state","seed","Error","factory","randi","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","MIN","MAX","seedLength","stateLength","byteLength","s","out","NAME","params"],"mappings":";;y9BAsBIA,EAAQ,GAEZA,SAAoBC,EACpBD,EAAO,kBAAqBE,EAC5BF,UAAqBG,MAKrBC,EAAiBJ,ECTbK,EAAcJ,EACdK,EAAsBJ,EACtBK,EAAuBJ,EACvBK,EAAWC,EACXC,EAAYC,EAAuCC,YACnDC,EAAaC,EACbC,EAAkBC,EAClBC,EAAWC,EACXC,EAAQC,MAgNZC,EAnKA,SAAkBC,GACjB,IAAIC,EACAC,EACAC,EAMJ,GAJAF,EAAO,CACNG,KAAQT,EAASS,KACjBC,KAAQV,EAASU,MAEbC,UAAUC,OAAS,CACvB,IAAMrB,EAAUc,GACf,MAAM,IAAIQ,UAAW,qDAAuDR,EAAU,MAKvF,GAHKT,EAAYS,EAAS,UACzBC,EAAKG,KAAOJ,EAAQI,MAEhBb,EAAYS,EAAS,UAEzB,GADAC,EAAKQ,MAAQT,EAAQS,WACD,IAAfR,EAAKQ,MACT,MAAM,IAAID,UAAW,gEAAkEP,EAAKQ,MAAQ,WAE/F,GAAKlB,EAAYS,EAAS,UAChCC,EAAKS,KAAOV,EAAQU,UACD,IAAdT,EAAKS,MACT,MAAM,IAAIF,UAAW,+DAAiEP,EAAKS,KAAO,MAGpG,GAAKnB,EAAYS,EAAS,UACzBC,EAAKI,KAAOL,EAAQK,MACdjB,EAAWa,EAAKI,OACrB,MAAM,IAAIG,UAAW,6DAA+DP,EAAKI,KAAO,MAKnG,QAAc,KADdF,EAAON,EAAOI,EAAKG,OAElB,MAAM,IAAIO,MAAO,2DAA6DV,EAAKG,KAAO,MA2B3F,OAvBEF,OAFkB,IAAfD,EAAKQ,WACU,IAAdR,EAAKS,KACFP,EAAKS,UAELT,EAAKS,QAAQ,CACnBF,KAAQT,EAAKS,OAIRP,EAAKS,QAAQ,CACnBH,MAASR,EAAKQ,MACdJ,KAAQJ,EAAKI,OAGftB,EAAa8B,EAAO,OAAQ,SAC5B7B,EAAqB6B,EAAO,OAAQC,GACpC9B,EAAqB6B,EAAO,aAAcE,GAC1C9B,EAAsB4B,EAAO,QAASG,EAAUC,GAChDjC,EAAqB6B,EAAO,cAAeK,GAC3ClC,EAAqB6B,EAAO,aAAcM,GAC1CpC,EAAa8B,EAAO,SAAUO,GAC9BrC,EAAa8B,EAAO,OAAQX,GAC5BnB,EAAa8B,EAAO,MAAOX,EAAKmB,KAChCtC,EAAa8B,EAAO,MAAOX,EAAKoB,KAEzBT,EAQP,SAASC,IACR,OAAOZ,EAAKQ,KASb,SAASK,IACR,OAAOb,EAAKqB,WASb,SAASL,IACR,OAAOhB,EAAKsB,YASb,SAASL,IACR,OAAOjB,EAAKuB,WASb,SAAST,IACR,OAAOd,EAAKO,MAUb,SAASQ,EAAUS,GAClBxB,EAAKO,MAAQiB,EAad,SAASN,IACR,IAAIO,EAAM,CACVA,KAAW,QAIX,OAHAA,EAAIvB,KAAOS,EAAMe,KAAO,IAAM1B,EAAK0B,KACnCD,EAAIlB,MAAQhB,EAAiBS,EAAKO,OAClCkB,EAAIE,OAAS,GACNF,EAaR,SAASd,IACR,OAAOX,QCjNKvB"}